{"name":"Yaaas","tagline":"Yet Another Angular Alert Service","body":"yaaas\r\n=====\r\n\r\n## Yet Another Angular Alert Service\r\n\r\nBecause there aren't enough toaster-like alert services out there, here's another option.  Most of the other services I found work just great, but are less useful in production environments where a user wants to be able to look at the messages after they disappear or send a history of the thrown alerts.  So, yaaas.\r\n\r\n[github fancy page](http://beartums.github.io/yaaas)\r\n\r\n[demo](http://beartums.github.io/yaaas/yaaasDemo.html)\r\n\r\n## Installation\r\nYou need yaaas.js and yaaas.css.  Put them in a directory and load them as needed.\r\n\r\nTo run the demo, just take the whole directory and click on launch yaaasDemo.html\r\n\r\n## Dependencies\r\n* angular.js (currently using 1.4.2, but works with earlier versions as well)\r\n* angular-animate (1.4.2 - probably earlier versions as well)\r\n* bootstrap.css\r\n* The incomparable [alasql](https://github.com/agershun/alasql), if you want to be able to download history to a CSV file (when using the toolbar directive)\r\n* The very useful [XLSX](https://github.com/SheetJS/js-xlsx), if you want to be able to download history to an XLSX spreadsheet (when using the toolbar directive)\r\n\r\n## Features\r\n* Closeable, auto-scrolling, popover alerts\r\n* Anchored to one of the widnow's four corners\r\n* Variable display duration\r\n* Bootstrap Info, Warning, Danger, and Success are supported\r\n* Variable number of alerts to display at one time\r\n* Alert history (available to the controller)\r\n* Alert History (scrollable, user-controlled)\r\n* Download alerts history to CSV or XLSX\r\n\r\n## Usage\r\n* Include yaaas.js and yaaas.css in your html file\r\n* Pass yaaas into your module\r\n`angular.app('myApp',['yaaas']);`\r\n* Pass yaaaService into your controller\r\n`myApp.controller('myAppCtrl', function(yaaaService) {...};`\r\n* Include the `<yaa-alert></yaa-alert>` element in your html file\r\n* Configure your <yaa-alert> directive with v-pos, h-pos, width, and pe attributes\r\n* Include the `<yaa-toolbar></yaa-toolbar>` element in your html file, if you want to expose the toolbar\r\n* Add alerts using yaaaService.addAlert() in your controller\r\n* Everything else is done for you\r\n\r\nmyApp.js:\r\n```\r\nangular.module('myApp',['yaaas'])\r\n\r\n  .controller('myAppCtrl', function($scope, yaaaService) {\r\n    yaaaService.addAlert('Warning!', 'This is an important alert'); // default to 5 seconds, info style\r\n    yaaaService.addAlert('Warning!', 'This is a more important alert',10,'danger'); // 10 second display, danger style\r\n    yaaaService.addAlert('Thank goodness!', 'Dodged a bullet on that one',15, 'success'); 15 seconds, success style\r\n  });\r\n```\r\n\r\nThe HTML:\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n\t<head>\r\n  \t  <title>yaaas demo</title>\r\n    \t  <link rel=\"stylesheet\" href=\"bower_components/bootstrap/dist/css/bootstrap.css\">\r\n    \t  <link rel=\"stylesheet\" href=\"yaaas.css\">\r\n\t</head>\r\n\r\n\t<body ng-app=\"myApp\"  ng-controller=\"myAppCtrl\">\r\n          <script src=\"bower_components/angular/angular.min.js\"></script>\r\n          <script src=\"yaaas.js\"></script>\r\n          <script src=\"myApp.js\"></script>\r\n          <yaa-alert></yaa-alert>\r\n        </body> \r\n```\r\n\r\n### yaa-alert element\r\n>#### **h-pos** attribute\r\nWhich side of the screen to display the scrolling alerts. ('left'/'right', default 'right') \r\n#### **name** attribute\r\nIf specified, this directive will only show alerts named with this name AND alerts named with ''.\r\n#### **v-pos** attrribute\r\nWhether to show the alerts at the bottom of the screen or the top.  NOTE: as currently \r\nimplemented, if pe is not set to 'true', this value will always set itself to 'top'. \r\n('bottom'/'top', defaults 'top')\r\n#### **width** attribute\r\nWidth of the alert (default '300px')\r\n#### **active-alerts** attribute (default ['danger','warning']\r\nA string (or string array) of the alert class(es) that you want to be enabled for display by default.  Available classes are tied to boostrap classes: 'danger', 'warning', 'success', 'info'.  Enable the toolbar to give the user the ability to manipulate this setting\r\n#### **pe** attribute\r\nBoolean, indicating whether your target browsers support pointer-events (most modern non-mobile \r\nbrowsers do, but that is only recently).  If you do not specify this and set it to 'true', alerts\r\ncannot, as currently implemented, scroll from the bottom.\r\n\r\n### Examples\r\n```<yaa-alert width=\"400px\" v-pos=\"bottom\" pe=\"true\"></yaa-alert>```\r\n...wil scroll your alerts from the bottom on the right side of the screen and each alert will be 400 pixels wide\r\n\r\n```<yaa-alert v-pos=\"bottom\" h-pos=\"left\"></yaa-alert>```\r\n...will scroll your 300 pixel wide alerts from the top (pe is not set to true) on the left side of the screen\r\n\r\n\r\n### yaa-toolbar element\r\n>#### **h-pos** attribute (default 'right')\r\nWhich side of the screen to display the toolbar.  Usually this will mirror the settings of the alert element. ('left'/'right') \r\n#### **name** attribute\r\nThis should match the name of the alert element it is controlling.\r\n#### **v-pos** attribute (default 'bottom')\r\nWhether to show the alerts at the bottom of the screen or the top. ('top','bottom') \r\n#### **showCounts** attribute (default 'true')\r\nwhether to display the count buttons by default on loading\r\n\r\n\r\n### yaaaService\r\n>#### .addAlert(title, message, timeout, level, name)\r\nAdd an alert to the queue.\r\n>>##### title\r\nBolded portion of the alert: **Warning** This is an alert\r\n##### message\r\nAlert protion of the alert ('This is an alert' in the above example)\r\n##### timeout (default = 5)\r\nSeconds before the message will disappear from the screen. 0 or a negative will make it display until the close button is clicked.\r\n##### level\r\nAlert level, corresponding to Bootstrap standards ('info', 'success', 'warning'. 'danger').\r\n##### name\r\nThe name of the directive this alert is associated with.  '' displays it in all yaa-alert directives (default = '').\r\n##### stacktrace\r\nA stacktrace that can be saved with the error for later downloading\r\n\r\n>#### .removeAlert(alert)\r\nremove the specified alert from the queue.\r\n>>##### alert\r\nThe alert object to be removed\r\n\r\n>#### .getAlertHistory()\r\nGet an array of all the alerts since the app was initialised.\r\n\r\n>#### .getAlertHistory()\r\nGet an array of all the alerts since the app was initialised.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}